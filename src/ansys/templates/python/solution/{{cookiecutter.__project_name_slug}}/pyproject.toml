[build-system]
requires = ["poetry-core>=1.0.0,<1.3.0", "setuptools>=65.0"]
build-backend = "poetry.core.masonry.api"

# The following lines were added to enforce the poetry version needed for the project.
# It will be read by the setup_environment.py script to install this version.
[build-system-requirements]
build-system-version = "1.8.4"

[tool.poetry]
name = "{{cookiecutter.__pkg_name}}"
version = "{{cookiecutter.__version}}"
description = "{{cookiecutter.__short_description}}"
license = "Proprietary"
authors = ["ANSYS, Inc. <solution-applications.maintainers@ansys.com>"]
maintainers = ["ANSYS, Inc. <solution-applications.maintainers@ansys.com>"]
readme = "README.md"
keywords = ["Ansys Solutions"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Other Audience",
    "License :: Other/Proprietary License",
    "Natural Language :: English",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering"
]
packages = [
    { include = "ansys", from = "src" },
]

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[[tool.poetry.source]]
name = "solutions-private-pypi"
url = "https://pkgs.dev.azure.com/pyansys/_packaging/ansys-solutions/pypi/simple/"
priority = "supplemental"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
ansys-saf-glow-engine = {version = "^1.17.0", source = "solutions-private-pypi"}
pydantic = "<2.9.2"

[tool.poetry.group.ui]
optional = true
[tool.poetry.group.ui.dependencies]
ansys-solutions-dash-super-components = {version = "^0.1.dev10", source = "solutions-private-pypi"}
{% if cookiecutter.__frontend_type == "dash" %}
dash = "^2.6"
dash_bootstrap_components = "^1.2"
dash-extensions = ">=0.1.13"
dash-iconify = "^0.1"
dash-mantine-components = "^0.12.1"
dash-uploader = "^0.6"
{% elif cookiecutter.__frontend_type == "awc-dash" %}
ansys-web-components-dash = {version = ">=0.0.dev4", source = "solutions-private-pypi"}
dash = "^2.6"
dash_bootstrap_components = "^1.2"
dash-uploader = "^0.6"
{% endif %}

[tool.poetry.group.desktop]
optional = true
[tool.poetry.group.desktop.dependencies]
ansys-saf-portal = {version = "^1.2.1", source = "solutions-private-pypi"}
ansys-saf-desktop = {version = "^1.2.4", source = "solutions-private-pypi"}

[tool.poetry.group.doc]
optional = true
[tool.poetry.group.doc.dependencies]
ansys-sphinx-theme = "^1.2.2"
autodoc-pydantic = "^2.2.0"
nbsphinx = "^0.8.9"
numpydoc = "^1.6.0"
sphinx = "^7.2.6"
sphinx-copybutton = "^0.5.2"
sphinx_toolbox = "^3.5"
sphinxcontrib-mermaid = "^0.7.1"
sphinxcontrib-video = "^0.3.1"
sphinx-code-tabs = "^0.5.5"
sphinx-tabs = ">=1.2.1,<3.5.0"
sphinx-gallery = "^0.15"
sphinx-design = "^0.6.1"
sphinx-markdown-builder = "^0.6.6"
sphinxemoji = "^0.2"
toml = "^0.10"
vale = "^2.26.0.0"

[tool.poetry.group.tests]
optional = true
[tool.poetry.group.tests.dependencies]
coverage = "^6.4.1"
filelock = "^3.8.0"
mock = "^4.0.3"
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
pytest-dependency = "^0.5.1"
pytest-flakes = "^4.0.5"
pytest-pep8 = "^1.0"
pytest-pythonpath = "^0.7"
pytest-xdist = "^3.0.2"
pytest-mock = "^3.12"
tox = "^4.4.0"

[tool.poetry.group.build]
optional = true
[tool.poetry.group.build.dependencies]
build = "^0.8.0"
twine = "^5.1.1"
pyinstaller = "^6.11.1"
toml = "^0.10.2"
pyc-wheel = "^1.2.7"

[tool.poetry.group.style]
optional = true
[tool.poetry.group.style.dependencies]
black = "24.1.1"
isort = "5.13.2"
flake8 = {version="7.0.0", python=">=3.8.1,<3.13"}
codespell = "2.2.6"
pydocstyle = "6.3.0"

[tool.poetry.plugins."console_scripts"]
{{ cookiecutter.__solution_name_slug }}_main = "ansys.solutions.{{ cookiecutter.__solution_name_slug }}.main:main"

[tool.black]
line-length = {{ cookiecutter.__max_linelength }}

[tool.isort]
profile = "black"
force_sort_within_sections = true
line_length = {{ cookiecutter.__max_linelength }}
default_section = "THIRDPARTY"
src_paths = ["doc", "src", "tests"]

[tool.codespell]
skip = '.github,.venv,.tox,requirements,CODEOWNERS,*.tmp'
count = ''
quiet-level = 3
check-hidden = ""
ignore-words = ".codespell.ignore"

[tool.pydocstyle]
select = ['D107']

[tool.coverage.run]
source = ["ansys.solutions"]

[tool.coverage.report]
show_missing = true

[tool.towncrier]
package = "{{ cookiecutter.__pkg_namespace }}"
directory = "doc/changelog.d"
filename = "doc/source/changelog.rst"
start_string = ".. towncrier release notes start\n"
template = "doc/changelog.d/changelog_template.jinja"
title_format = "`{version} <https://github.com/ansys/{{ cookiecutter.__pkg_namespace }}/releases/tag/v{version}>`_ - {project_date}"
issue_format = "`#{issue} <https://github.com/ansys/{{ cookiecutter.__pkg_namespace }}/pull/{issue}>`_"

[[tool.towncrier.type]]
directory = "added"
name = "Added"
showcontent = true

[[tool.towncrier.type]]
directory = "changed"
name = "Changed"
showcontent = true

[[tool.towncrier.type]]
directory = "fixed"
name = "Fixed"
showcontent = true

[[tool.towncrier.type]]
directory = "dependencies"
name = "Dependencies"
showcontent = true

[[tool.towncrier.type]]
directory = "miscellaneous"
name = "Miscellaneous"
showcontent = true
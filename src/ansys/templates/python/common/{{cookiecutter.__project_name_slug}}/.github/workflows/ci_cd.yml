name: CI
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '{{ cookiecutter.__requires_python }}'
  DOCUMENTATION_CNAME: '{{ cookiecutter.__product_name_slug }}.docs.pyansys.com'
  LIBRARY_NAME: '{{ cookiecutter.__pkg_namespace | replace(".", "-") }}'
  MEILISEARCH_API_KEY: {{ '${{ secrets.MEILISEARCH_API_KEY }}' }}
  MEILISEARCH_HOST_URL: {{ '${{ vars.MEILISEARCH_HOST_URL }}' }}

concurrency:
  group: {{ '${{ github.workflow }}-${{ github.ref }}' }}
  cancel-in-progress: true

jobs:

  update-changelog:
    name: "Update CHANGELOG (on release)"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: ansys/actions/doc-deploy-changelog@v10
        with:
          token: {{ '${{ secrets.PYANSYS_CI_BOT_TOKEN }}' }}
          bot-user: {{ '${{ secrets.PYANSYS_CI_BOT_USERNAME }}' }}
          bot-email: {{ '${{ secrets.PYANSYS_CI_BOT_EMAIL }}' }}

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/code-style@v10
        with:
          python-version: {{ '${{ env.MAIN_PYTHON_VERSION }}' }}

  doc-style:
    name: "Documentation Style Check"
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v10
        with:
          token: {{ '${{ secrets.GITHUB_TOKEN }}' }}

  vulnerabilities:
    name: Vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys Vulnerability check
        uses: ansys/actions/check-vulnerabilities@v10
        with:
          python-version: {{ '${{ env.MAIN_PYTHON_VERSION }}' }}
          python-package-name: {{ '${{ env.PACKAGE_NAME }}' }}
          token: {{ '${{ secrets.PYANSYS_CI_BOT_TOKEN }}' }}
          dev-mode: ${{ github.ref != 'refs/heads/main' }}

  smoke-tests:
    name: "Build and Smoke tests"
    runs-on: {{ '${{ matrix.os }}' }}
    needs: [code-style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        {% set required_minor = cookiecutter.__requires_python[2:] | int %}
        {%- set python_versions = [ ] -%}
        {%- for minor in range(9, 13) -%}
        {%- if minor >= required_minor -%}
        {{ python_versions.append("3." + minor | string ) or ''}}
        {%- endif -%}
        {%- endfor -%}
        python-version: {{ python_versions }}
    steps:
      - uses: ansys/actions/build-wheelhouse@v10
        with:
          library-name: {{ '${{ env.LIBRARY_NAME }}' }}
          operating-system: {{ '${{ matrix.os }}' }}
          python-version: {{ '${{ matrix.python-version }}' }}

  tests:
    name: "Tests"
    runs-on: {{ '${{ matrix.os }}' }}
    needs: [smoke-tests]
    strategy:
      matrix:
       os: [ubuntu-latest, windows-latest]
       {% set required_minor = cookiecutter.__requires_python[2:] | int %}
       {%- set python_versions = [ ] -%}
       {%- for minor in range(9, 13) -%}
       {%- if minor >= required_minor -%}
       {{ python_versions.append("3." + minor | string ) or ''}}
       {%- endif -%}
       {%- endfor -%}
       python-version: {{ python_versions }}
      fail-fast: false
    steps:
      - name: PyAnsys tests check
        uses: ansys/actions/tests-pytest@v10
        with:
          pytest-extra-args: "--cov=ansys --cov-report=term --cov-report=html:.cov/html"
          python-version: {{ '${{ matrix.python-version }}' }}

      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        if: env.MAIN_PYTHON_VERSION == matrix.python-version
        with:
          name: coverage-tests-{{ '${{ matrix.os }}' }}
          path: .cov
          retention-days: 7

      - name: Upload coverage results (as .coverage)
        uses: actions/upload-artifact@v4
        if: env.MAIN_PYTHON_VERSION == matrix.python-version
        with:
          name: coverage-file-tests-{{ '${{ matrix.os }}' }}
          path: .coverage
          retention-days: 7

  doc-build:
    name: "Build documentation"
    runs-on: ubuntu-latest
    needs: [doc-style]
    steps:
      - uses: ansys/actions/doc-build@v10
        with:
          python-version: {{ '${{ env.MAIN_PYTHON_VERSION }}' }}

  build-library:
    name: "Build library"
    runs-on: ubuntu-latest
    steps:
      - name: "Build library source and wheel artifacts"
        uses: ansys/actions/build-library@v10
        with:
          library-name: {{ '${{ env.LIBRARY_NAME }}' }}

  doc-deploy-dev:
    name: "Deploy development documentation"
    runs-on: ubuntu-latest
    needs: [doc-build, build-library]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: ansys/actions/doc-deploy-dev@v10
        with:
          cname: {{ '${{ env.DOCUMENTATION_CNAME }}' }}
          token: {{ '${{ secrets.GITHUB_TOKEN }}' }}
          bot-user: {{ '${{ secrets.PYANSYS_CI_BOT_USERNAME }}' }}
          bot-email: {{ '${{ secrets.PYANSYS_CI_BOT_EMAIL }}' }}

  doc-deploy-stable:
    name: "Deploy stable documentation"
    runs-on: ubuntu-latest
    needs: [doc-build, build-library]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - uses: ansys/actions/doc-deploy-stable@v10
        with:
          cname: {{ '${{ env.DOCUMENTATION_CNAME }}' }}
          token: {{ '${{ secrets.GITHUB_TOKEN }}' }}
          bot-user: {{ '${{ secrets.PYANSYS_CI_BOT_USERNAME }}' }}
          bot-email: {{ '${{ secrets.PYANSYS_CI_BOT_EMAIL }}' }}

  release:
    name: Release project to GitHub
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [doc-build, build-library, update-changelog]
    runs-on: ubuntu-latest
    # Specifying a GitHub environment is optional, but strongly encouraged
    environment: release
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Release to GitHub
        uses: ansys/actions/release-github@v10
        with:
          token: {{ '${{ secrets.GITHUB_TOKEN }}' }}
          library-name: {{ '${{ env.PACKAGE_NAME }}' }}
          changelog-release-notes: true

  release-pypi-private:
    name: "Release to the private PyPI repository"
    runs-on: ubuntu-latest
    needs: [doc-build, build-library, update-changelog]
    steps:
      - name: "Release to the private PyPI repository"
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
        uses: ansys/actions/release-pypi-private@v10
        with:
          library-name: {{ '${{ env.LIBRARY_NAME }}' }}
          twine-username: "__token__"
          twine-token: {{ '${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}' }}

  # Uncomment the following lines to enable public PyPI releases
  # release-pypi:
  #   name: Release project to PyPI
  #   if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
  #   needs: [doc-build, build-library, update-changelog]
  #   runs-on: ubuntu-latest
  #   # Specifying a GitHub environment is optional, but strongly encouraged
  #   environment: release
  #   permissions:
  #     id-token: write
  #     contents: write
  #   steps:
  #     - name: "Download the library artifacts from build-library step"
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: "{{ '${{ env.PACKAGE_NAME }}' }}-artifacts"
  #         path: "{{ '${{ env.PACKAGE_NAME }}' }}-artifacts"

  #     - name: "Upload artifacts to PyPI using trusted publisher"
  #       uses: pypa/gh-action-pypi-publish@v1.12.4
  #       with:
  #         repository-url: "https://upload.pypi.org/legacy/"
  #         print-hash: true
  #         packages-dir: "{{ '${{ env.PACKAGE_NAME }}' }}-artifacts"
  #         skip-existing: false

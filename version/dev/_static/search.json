[{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started\n\nTo successfully install ansys-templates, carefully read all instructions on this page."},{"objectID":"Home","href":"getting_started/index.html#before-installing","title":"Getting started > Before installing","text":"Before installing\n\nSeveral requirements must be met before you install\nansys-templates."},{"objectID":"Home","href":"getting_started/index.html#upgrading-pip","title":"Getting started > Upgrading pip","text":"Upgrading pip\n\nUpgrade pip with:"},{"objectID":"Home","href":"getting_started/index.html#installing-pipx","title":"Getting started > Installing pipx","text":"Installing pipx\n\nThe ansys-templates tool is built on top of Python. To ensure a clean\ninstallation, you can use pipx. It ensures an isolated installation of\nany Python tool that you want to use.\n\nInstall pipx with:\n\nEnsure that pipx is in your PATH with:\n\nIf you encounter any issues when installing pipx, see pipx installation\nguidelines."},{"objectID":"Home","href":"getting_started/index.html#installing-ansys-templates","title":"Getting started > Installing ansys-templates","text":"Installing ansys-templates\n\nOnce pipx is installed, proceed with the installation of\nansys-templates with:"},{"objectID":"Home","href":"getting_started/index.html#upgrading-ansys-templates","title":"Getting started > Upgrading ansys-templates","text":"Upgrading ansys-templates\n\nIf you already have ansys-templates installed with pipx, you can upgrade\nto the latest version with:"},{"objectID":"Home","href":"getting_started/index.html#verify-your-installation","title":"Getting started > Verify your installation","text":"Verify your installation\n\nOnce installed, you can verify your installation with:\n\nThe following code is returned:\n\n\n\n\n\n"},{"objectID":"Templates","href":"templates.html#templates","title":"Templates","text":"Templates\n\nAll the available templates in ansys-templates can be found on this page.\n\nFor quick-reference, the following table provides an overview of the main\ncapabilities and features of each template:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTemplate\n\nsetup.py\n\npyproject.toml\n\nActions\n\ntox.ini\n\nrequirements/\n\nDocker\n\ndoc-project\n\n\n\n\n\nX\n\nX\n\nX\n\n\n\npybasic\n\nX\n\n\n\n\n\n\n\n\n\n\n\npyansys\n\nX\n\nX\n\nX\n\n\n\n\n\n\n\npyansys-advanced\n\nX\n\nX\n\nX\n\nX\n\nX\n\n\n\npyansys-openapi-client\n\n\n\n\n\n\n\n\n\n\n\n\n\npyace\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\npyace-fast\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\npyace-flask\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\npyace-grpc\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\nIn the demo/ branches of the repository you can find rendered versions\nfor each one of the templates. Take a look to these branches for having a\nbetter idea on the final project layout."},{"objectID":"Templates","href":"templates.html#doc-project","title":"Templates > doc-project","text":"doc-project\n\nThis template renders a documentation project based on Sphinx. You can chose\nbetween Ansys or PyAnsys logos together with the color theme.\n\nMain features of this package are:\n\nAbility to choose between Ansys or PyAnsys logos.\n\nIncludes GitHub workflows (actions).\n\nAll requirements_*.txt are contained in a requirements_/ directory.\n\nIncludes a tox.ini file.\n\nTo create a new project using this template by running:\n\nLink to demo\n\nansys-templates/demo - doc-project"},{"objectID":"Templates","href":"templates.html#pybasic","title":"Templates > pybasic","text":"pybasic\n\nThis template renders to a basic Python project. It does not follow the Ansys\nnamespace, meaning that a src/library/ layout is produced instead of the\nsrc/ansys/product/library one.\n\nMain features of this package are:\n\nUses a  src/library layout.\n\nUses a setup.py file for project configuration.\n\nIncludes a pyproject.toml for tools configuration.\n\nIncludes doc/ and tests/ directories.\n\nAll requirements_*.txt are contained in the base directory.\n\nTo create a new project using this template by running:\n\nLink to demo\n\nansys-templates/demo - pybasic"},{"objectID":"Templates","href":"templates.html#pyansys","title":"Templates > pyansys","text":"pyansys\n\nThis template renders to a basic Python project compliant with the latest\nPyAnsys guidelines.\n\nMain features of this package are:\n\nUses Ansys namespace by creating a src/ansys/product/library.\n\nUses a setup.py file for project configuration.\n\nIncludes a pyproject.toml for tools configuration.\n\nIncludes doc/ and tests/ directories.\n\nIncludes GitHub workflows (actions).\n\nAll requirements_*.txt are contained in the base directory.\n\nTo create a new project using this template, run:\n\nLink to demo\n\nansys-templates/demo - pyansys"},{"objectID":"Templates","href":"templates.html#pyansys-advanced","title":"Templates > pyansys-advanced","text":"pyansys-advanced\n\nThis template renders to a basic Python project compliant with the latest\nPyAnsys guidelines and the most modern techniques in Python packaging.\n\nMain features of this package are:\n\nUses Ansys namespace by creating a src/ansys/product/library.\n\nIncludes a pyproject.toml for project and tools configuration.\n\nAllows for the selection of the build-system between flit, poetry or setuptools.\n\nIncludes doc/ and tests/.\n\nIncludes GitHub workflows (actions).\n\nAll requirements_*.txt are contained in a requirements_/ directory.\n\nIncludes a tox.ini file.\n\nTo create a new project using this template, run:\n\nLink to demo\n\nThe there are three demo branches depending on your build-system.\n\nansys-templates/demo - pyansys-advanced-flit\n\nansys-templates/demo - pyansys-advanced-poetry\n\nansys-templates/demo - pyansys-advanced-setuptools"},{"objectID":"Templates","href":"templates.html#pyansys-openapi-client","title":"Templates > pyansys-openapi-client","text":"pyansys-openapi-client\n\nCreate an OpenAPI Client Package project compliant with PyAnsys guidelines.\n\nMain features of this package are:\n\nIncludes GitHub workflows for generating, building and testing the library.\n\nCustomizable pom.xml file.\n\nCustomizable .m2/settings.xml file.\n\nTo create a new project using this template, run:\n\nLink to demo\n\nDemo unavailable at the moment."},{"objectID":"Templates","href":"templates.html#pyace","title":"Templates > pyace","text":"pyace\n\nThis template renders to a basic Python project compliant with the latest\nACE guidelines.\n\nMain features of this package are:\n\nUses a src/ layout.\n\nIncludes a pyproject.toml for project and tools configuration.\n\nAllows for the selection of the build-system between flit, poetry or setuptools.\n\nIncludes doc/ and tests/.\n\nAllows CI platform selection between GitHub and Azure DevOps.\n\nAll requirements_*.txt are contained in a requirements_/ directory.\n\nIncludes a tox.ini file.\n\nAbility to integrate Docker within the project.\n\nTo create a new project using this template, run:\n\nLink to demo\n\nansys-templates/demo - pyace-pkg"},{"objectID":"Templates","href":"templates.html#pyace-fast","title":"Templates > pyace-fast","text":"pyace-fast\n\nThis template renders to a basic Python project compliant with the latest\nACE guidelines and focused on FastAPI development:\n\nMain features of this package are:\n\nFocused on FastAPI development.\n\nUses a src/ layout.\n\nIncludes a pyproject.toml for project and tools configuration.\n\nAllows for the selection of the build-system between flit, poetry or setuptools.\n\nIncludes doc/ and tests/.\n\nAllows CI platform selection between GitHub and Azure DevOps.\n\nAll requirements_*.txt are contained in a requirements_/ directory.\n\nIncludes a tox.ini file.\n\nAbility to integrate Docker within the project.\n\nTo create a new project using this template, run:\n.. code-block:: text\n\nansys-templates new pyace-fast\n\nLink to demo\n\nansys-templates/demo - pyace-fast"},{"objectID":"Templates","href":"templates.html#pyace-flask","title":"Templates > pyace-flask","text":"pyace-flask\n\nThis template renders to a basic Python project compliant with the latest\nACE guidelines and focused on Flask development:\n\nMain features of this package are:\n\nFocused on Flask development.\n\nUses a src/ layout.\n\nIncludes a pyproject.toml for project and tools configuration.\n\nAllows for the selection of the build-system between flit, poetry or setuptools.\n\nIncludes doc/ and tests/.\n\nAllows CI platform selection between GitHub and Azure DevOps.\n\nAll requirements_*.txt are contained in a requirements_/ directory.\n\nIncludes a tox.ini file.\n\nAbility to integrate Docker within the project.\n\nTo create a new project using this template, run:\n\nLink to demo\n\nansys-templates/demo - pyace-flask"},{"objectID":"Templates","href":"templates.html#pyace-grpc","title":"Templates > pyace-grpc","text":"pyace-grpc\n\nThis template renders to a basic Python project compliant with the latest\nACE guidelines and focused on GRPC development:\n\nMain features of this package are:\n\nFocused on GRPC development.\n\nUses a src/ layout.\n\nIncludes a pyproject.toml for project and tools configuration.\n\nAllows for the selection of the build-system between flit, poetry or setuptools.\n\nIncludes doc/ and tests/.\n\nAllows CI platform selection between GitHub and Azure DevOps.\n\nAll requirements_*.txt are contained in a requirements_/ directory.\n\nIncludes a tox.ini file.\n\nAbility to integrate Docker within the project.\n\nTo create a new project using this template, run:\n.. code-block:: text\n\nansys-templates new pyace-grpc\n\nLink to demo\n\nansys-templates/demo - pyace-grpc\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/templating.html#how-to-add-a-new-template","title":"How to add a new template","text":"How to add a new template\n\nYou can easily add new templates. However, before doing so, it is important that\nyou read the Contributing section."},{"objectID":"Home","href":"user_guide/templating.html#understanding-the-templates-directory","title":"How to add a new template > Understanding the templates directory","text":"Understanding the templates directory\n\nIn ansys-templates, all templates are placed in src/ansys/templates/.\nThe templates/ directory contains different families of templates.\n\nA family of templates is simply a directory with a common/ directory and\nvarious templates directories.\n\nThe common/ directory contains various resources that are common to all\ntemplates of a given family. This avoids duplication of files across templates.\n\nEach template directory contains its own set of custom files.\n\nBe sure to confirm if there is already a family for the template you want\nto add before creating a new one."},{"objectID":"Home","href":"user_guide/templating.html#adding-a-new-family-of-templates","title":"How to add a new template > Adding a new family of templates","text":"Adding a new family of templates\n\nStart by creating a new directory in src/ansys/templates/ with the name of\nthe new family of templates. For example, create src/ansys/templates/new_family:\n\nInside this new family, you must create at least two different files:\n\nA cookiecutter.json file for specifying the minimum required variables for\nany of this family’s templates to work. You must use cookie cutter private\nvariables in this file.\n\nA common/{{cookiecutter.__project_name_slug}}/ directory to contain all of\nthe typical files for this family. All files in the common/{{cookiecutter.__project_name_slug}}\ndirectory will be copied to each template when rendering it.\n\nYou can later add a hooks/post_gen_project.py file in the\nfamily/template/ directory if you need to remove non-desired files coming from\nthe common/{{cookiecutter.__project_name_slug}} directory."},{"objectID":"Home","href":"user_guide/templating.html#adding-a-new-template-to-a-family","title":"How to add a new template > Adding a new template to a family","text":"Adding a new template to a family\n\nTo add a new template to a family, first create a new template directory. For example,\nsrc/ansys/templates/family_0/new_template:\n\nInside the new_template/ directory, you must create at least two different files:\n\nA cookiecutter.json file for specifying variables for the new template and\noverriding common/cookiecutter.json variables.\n\nA {{cookiecutter.__project_name_slug}}/ directory to contain any additional files or\ndirectories that you would like to include in your new template. The files in this directory\nwill be combined with the files in the  common/{{cookiecutter.__project_name_slug}}/\ndirectory."},{"objectID":"Home","href":"user_guide/templating.html#adding-a-new-template-to-the-cli","title":"How to add a new template > Adding a new template to the CLI","text":"Adding a new template to the CLI\n\nTo have access to a newly template from the CLI (command line interface), you must do\nthe following:\n\nInclude the name and description of the new template in the\nsrc/ansys/templates/__init__.py file under the\nAVAILABLE_TEMPLATES_AND_DESCRIPTION dictionary.\n\nAdd the path to the new template in src/ansys/templates/paths.py and in\nthe TEMPLATE_PATH_FINDER dictionary.\n\nCreate a command to expose the new template in the CLI:"},{"objectID":"Home","href":"user_guide/templating.html#adding-unit-tests","title":"How to add a new template > Adding unit tests","text":"Adding unit tests\n\nEach template must have its own unit test script. To organize the test suite,\nthe following namespace is followed:\n\ntests/tests_templates_family/test_template_family_name_of_template.py\n\nIf you created a new family template, make sure to include tests for the\nfamily/common/ directory too.\n\nExpected common files should be defined in tests/tests_templates_family/conftest.py\nas a pytest fixture. For example, consider the following code of a generic conftest.py\nfile:"},{"objectID":"Home","href":"user_guide/templating.html#add-the-family-to-tox-envs","title":"How to add a new template > Add the family to tox envs","text":"Add the family to tox envs\n\nIf you created a new family, you must add it to the [tox] set of\nenvironments:\n\nLook for the [testenv] section in the tox.ini file.\n\nWithin this section, look for the setenv variable.\n\nAdd the following line:"},{"objectID":"Home","href":"user_guide/templating.html#updating-the-ci","title":"How to add a new template > Updating the CI","text":"Updating the CI\n\nEach family of templates is tested within its own GitHub actions workflow.\nTherefore, you need to create a YML file for a new family:\n\n.github/workflows/templates_family.yml\n\nTo reduce the amount of CI jobs, templates are only tested under Linux.\nIf you require testing from a particular programming language, try to test the\nminimum and maximum supported versions of the language. Avoid all intermediate\nversions if possible."},{"objectID":"Home","href":"user_guide/templating.html#removing-undesired-files","title":"How to add a new template > Removing undesired files","text":"Removing undesired files\n\nIt is likely that there are some files coming from the common/\ndirectory that you do not want included in your rendered template. To exclude files,\nyou can take advantage of cookiecutter hooks.\n\nHooks are Python scripts that allow you to control the rendering process both before\nand after the process is executed. With hooks, you can move or delete any files\nincluded in the final rendered project.\n\nTo use hooks, you must create a new directory named src/ansys/templates/new_family/new_template/hooks.\nOnly two hooks are allowed:\n\npre_gen_project.py: executes before rendering process.\n\npost_gen_project.py: executes after the rendering process.\n\nBoth hooks are executed once the cookiecutter context has been started. This\nimplies that any file with a variable of the type {{ cookiecutter.some_var }}\nor Jinja2 syntax is not rendered.\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/usage.html#how-to-use-ansys-templates","title":"How to use ansys-templates","text":"How to use ansys-templates\n\nBecause ansys-templates is a command line tool, its usage is intended via\nthe command line. You can check available commands with:\n\nThe following help content is returned:"},{"objectID":"Home","href":"user_guide/usage.html#listing-all-templates","title":"How to use ansys-templates > Listing all templates","text":"Listing all templates\n\nYou can list all templates with:\n\nThe following templates are returned:"},{"objectID":"Home","href":"user_guide/usage.html#creating-a-new-pyansys-project","title":"How to use ansys-templates > Creating a new PyAnsys project","text":"Creating a new PyAnsys project\n\nYou can use a given template to create a new PyAnsys project with ansys-templates\nnew followed by the name of the template that you want to use:\n\nFor example, to create a new Python Package project with the pybasic template:\n\nYou can see all templates available with ansys-templates list. Or, see more\ninformation about how to use this command with:"},{"objectID":"Home","href":"user_guide/usage.html#checking-the-current-version","title":"How to use ansys-templates > Checking the current version","text":"Checking the current version\n\nCheck the your current installed version of PyAnsys templates with:"},{"objectID":"Home","href":"user_guide/index.html#user-guide","title":"User guide","text":"User guide\n\nThis section explains how to use ansys-templates and\ncontribute by adding new templates.\n\n"},{"objectID":"Release notes","href":"changelog.html#release-notes","title":"Release notes","text":"Release notes\n\nThis document contains the release notes for the project."},{"objectID":"Release notes","href":"changelog.html#510---april-08-2025","title":"Release notes > 5.1.0 - April 08, 2025","text":"5.1.0 - April 08, 2025\n\nMiscellaneous\n\n\n\n\n\nAdd method to detect activated venv.\n\n#520\n\nfix: replace move by copy method to enable overwrite.\n\n#522\n\nAdd token validity check.\n\n#528\n\nUse more recent version of dash-super-components\n\n#530\n\n[new solution] Support for python 3.12\n\n#531\n\n[new-solution] runtime error in the UI container\n\n#533\n\nDocumentation\n\n\n\n\n\nchore: update CHANGELOG for v5.0.0\n\n#517\n\nfix PYPI PAT in README\n\n#527\n\nMaintenance\n\n\n\n\n\nBuild(deps): Bump ansys/actions from 7 to 8\n\n#507\n\nfeat: Add .gitattributes file\n\n#536"},{"objectID":"Release notes","href":"changelog.html#500---2024-12-09","title":"Release notes > 5.0.0 - 2024-12-09","text":"5.0.0 - 2024-12-09"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix: contribut**** files #509"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\nUpdate solution template #516"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nchore: update CHANGELOG for v4.0.0 #503"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nUpdate dev version. #504\n\nAdd configuration file for containerized deployment. #512"},{"objectID":"Release notes","href":"changelog.html#400---2024-08-19","title":"Release notes > 4.0.0 - 2024-08-19","text":"4.0.0 - 2024-08-19"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix: updating poetry.lock before local wheels are used in solution template #495\n\nmaint: update theme version, actions and logo #501"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nBuild(deps-dev): Bump pytest-cov from 4.1.0 to 5.0.0 #457\n\nBuild(deps): Bump pytest from 8.2.1 to 8.2.2 #489\n\nBuild(deps): Bump ansys-sphinx-theme from 0.16.0 to 0.16.5 #490"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\nReplace AWC Tree by Dash Tree in the default UI mode of the solution template #498\n\nRemove pydantic constraint. #502"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nchore: update CHANGELOG for v3.0.0 #488"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nBuild(deps): Bump peter-evans/create-or-update-comment from 3 to 4 #432\n\nBuild(deps): Bump ansys/actions from 6 to 7 #499\n\nUpdate dependencies. #500"},{"objectID":"Release notes","href":"changelog.html#300---2024-06-04","title":"Release notes > 3.0.0 - 2024-06-04","text":"3.0.0 - 2024-06-04"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nfeat: update CLI option for creating a Dash UI using AWC as well #477"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nchore: update CHANGELOG for v2.1.0 #473\n\nmaint: bump main dev version #474\n\nMaintenance/update solution template #484"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix: update pydocstyle in pyproject.toml file #478\n\nfix: run tests with specified python-version in CI #480\n\nfix: change socio-economic to socioeconomic for codespell v2.3.0 #485\n\nfix: suppress autosectionlabel warning for changelog file #487"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nBuild(deps): Bump ansys-sphinx-theme from 0.14.1 to 0.16.0 #475\n\nBuild(deps): Bump pytest from 8.1.1 to 8.2.1 #479"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\nUpdate ansys saf portal version #472\n\nfeat: Add devcontainer config for codespaces #481\n\ndocs: update authors file #482"},{"objectID":"Release notes","href":"changelog.html#210---2024-05-14","title":"Release notes > 2.1.0 - 2024-05-14","text":"2.1.0 - 2024-05-14"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nchore: update templates #471"},{"objectID":"Home","href":"index.html#ansys-templates","title":"Ansys templates","text":"Ansys templates\n\n      \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe ansys-templates repository holds a collection of useful templates compliant\nwith PyAnsys guidelines. It also provides the ansys-templates command line tool\nfor interactively generating new projects based on previous templates.\n\nThe main advantages of using this tool are:\n\nBuilding process is fully interactive. There is no need to manually modify files.\n\nOutput of the project can easily be customized during the rendering process.\n\nGenerated projects are compliant with PyAnsys Developer’s Guidelines.\n\n\n\nFor information on using this tool, see the Ansys Templates Documentation.\n\n"},{"objectID":"Home","href":"index.html#how-to-install","title":"Ansys templates > How to install","text":"How to install\n\nUsers can install ansys-templates by running:\n\nThe usage of pipx is encouraged too. See installing ansys-templates using\npipx.\n\n\n\n"},{"objectID":"Home","href":"index.html#basic-commands","title":"Ansys templates > Basic commands","text":"Basic commands\n\nThe following commands are provided with ansys-templates:\n\nansys-templates --help: lists information about the tool.\n\nansys-templates list: lists all available templates.\n\nansys-templates new <template name>: creates a new project from template."},{"objectID":"Home","href":"index.html#available-templates","title":"Ansys templates > Available templates","text":"Available templates\n\nAvailable templates in ansys-templates are:\n\ndoc-project: Create a documentation project using Sphinx.\n\npybasic: Create a basic Python Package.\n\npyansys: Create a PyAnsys Python Package project.\n\npyansys-advanced: Create an advanced PyAnsys Python Package project.\n\npyansys-openapi-client: Create an OpenAPI Client Package project.\n\npyace: Create a Python project for any method developers.\n\npyace-flask: Create a Flask project initialized for any developer.\n\npyace-grpc: Create gRPC project initialized for any developer.\n\npyace-fast: Create a FastAPI project initialized for any developer."},{"objectID":"Home","href":"index.html#template-features","title":"Ansys templates > Template features","text":"Template features\n\nThe following table summarizes the main properties for each of the templates\navailable in ansys-templates:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTemplate\n\nsetup.py\n\npyproject.toml\n\nActions\n\ntox.ini\n\nrequirements/\n\nDocker\n\ndoc-project\n\n\n\n\n\nX\n\nX\n\nX\n\n\n\npybasic\n\nX\n\n\n\n\n\n\n\n\n\n\n\npyansys\n\nX\n\nX\n\nX\n\n\n\n\n\n\n\npyansys-advanced\n\nX\n\nX\n\nX\n\nX\n\nX\n\n\n\npyansys-openapi-client\n\n\n\n\n\n\n\n\n\n\n\n\n\npyace\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\npyace-fast\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\npyace-flask\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\npyace-grpc\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX"},{"objectID":"Home","href":"index.html#demo-branches","title":"Ansys templates > Demo branches","text":"Demo branches\n\nTo have a better idea on how each template will look once it gets rendered, see\nits corresponding demonstration branch.\n\nDemo branch for doc-project\n\nDemo branch for pybasic\n\nDemo branch for pyansys\n\nDemo branch for pyansys-advanced using flit\n\nDemo branch for pyansys-advanced using poetry\n\nDemo branch for pyansys-advanced using setuptools\n\nDemo branch for pyace\n\nDemo branch for pyace-fast\n\nDemo branch for pyace-flask\n\nDemo branch for pyace-grpc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}]